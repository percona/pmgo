// Code generated by MockGen. DO NOT EDIT.
// Source: /home/tim/git/pmgo/collection.go

// Package pmgomock is a generated GoMock package.
package pmgomock

import (
	x "."
	gomock "github.com/golang/mock/gomock"
	. "github.com/percona/pmgo"
	mgo_v2 "gopkg.in/mgo.v2"
	reflect "reflect"
)

// MockCollectionManager is a mock of CollectionManager interface
type MockCollectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionManagerMockRecorder
}

// MockCollectionManagerMockRecorder is the mock recorder for MockCollectionManager
type MockCollectionManagerMockRecorder struct {
	mock *MockCollectionManager
}

// NewMockCollectionManager creates a new mock instance
func NewMockCollectionManager(ctrl *gomock.Controller) *MockCollectionManager {
	mock := &MockCollectionManager{ctrl: ctrl}
	mock.recorder = &MockCollectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionManager) EXPECT() *MockCollectionManagerMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCollectionManager) Count() (int, error) {
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockCollectionManagerMockRecorder) Count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollectionManager)(nil).Count))
}

// Create mocks base method
func (m *MockCollectionManager) Create(arg0 *mgo_v2.CollectionInfo) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCollectionManagerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionManager)(nil).Create), arg0)
}

// DropCollection mocks base method
func (m *MockCollectionManager) DropCollection() error {
	ret := m.ctrl.Call(m, "DropCollection")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCollection indicates an expected call of DropCollection
func (mr *MockCollectionManagerMockRecorder) DropCollection() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockCollectionManager)(nil).DropCollection))
}

// Find mocks base method
func (m *MockCollectionManager) Find(arg0 interface{}) x.QueryManager {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockCollectionManagerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionManager)(nil).Find), arg0)
}

// Insert mocks base method
func (m *MockCollectionManager) Insert(docs ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range docs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCollectionManagerMockRecorder) Insert(docs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCollectionManager)(nil).Insert), docs...)
}

// Pipe mocks base method
func (m *MockCollectionManager) Pipe(arg0 interface{}) x.PipeManager {
	ret := m.ctrl.Call(m, "Pipe", arg0)
	ret0, _ := ret[0].(x.PipeManager)
	return ret0
}

// Pipe indicates an expected call of Pipe
func (mr *MockCollectionManagerMockRecorder) Pipe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockCollectionManager)(nil).Pipe), arg0)
}
