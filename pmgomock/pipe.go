// Code generated by MockGen. DO NOT EDIT.
// Source: /home/tim/git/pmgo/pipe.go

// Package pmgomock is a generated GoMock package.
package pmgomock

import (
	x "."
	gomock "github.com/golang/mock/gomock"
	. "github.com/percona/pmgo"
	mgo_v2 "gopkg.in/mgo.v2"
	reflect "reflect"
)

// MockPipeManager is a mock of PipeManager interface
type MockPipeManager struct {
	ctrl     *gomock.Controller
	recorder *MockPipeManagerMockRecorder
}

// MockPipeManagerMockRecorder is the mock recorder for MockPipeManager
type MockPipeManagerMockRecorder struct {
	mock *MockPipeManager
}

// NewMockPipeManager creates a new mock instance
func NewMockPipeManager(ctrl *gomock.Controller) *MockPipeManager {
	mock := &MockPipeManager{ctrl: ctrl}
	mock.recorder = &MockPipeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipeManager) EXPECT() *MockPipeManagerMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockPipeManager) All(result interface{}) error {
	ret := m.ctrl.Call(m, "All", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockPipeManagerMockRecorder) All(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPipeManager)(nil).All), result)
}

// AllowDiskUse mocks base method
func (m *MockPipeManager) AllowDiskUse() x.PipeManager {
	ret := m.ctrl.Call(m, "AllowDiskUse")
	ret0, _ := ret[0].(x.PipeManager)
	return ret0
}

// AllowDiskUse indicates an expected call of AllowDiskUse
func (mr *MockPipeManagerMockRecorder) AllowDiskUse() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowDiskUse", reflect.TypeOf((*MockPipeManager)(nil).AllowDiskUse))
}

// Batch mocks base method
func (m *MockPipeManager) Batch(n int) x.PipeManager {
	ret := m.ctrl.Call(m, "Batch", n)
	ret0, _ := ret[0].(x.PipeManager)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockPipeManagerMockRecorder) Batch(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockPipeManager)(nil).Batch), n)
}

// Explain mocks base method
func (m *MockPipeManager) Explain(result interface{}) error {
	ret := m.ctrl.Call(m, "Explain", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Explain indicates an expected call of Explain
func (mr *MockPipeManagerMockRecorder) Explain(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockPipeManager)(nil).Explain), result)
}

// Iter mocks base method
func (m *MockPipeManager) Iter() *mgo_v2.Iter {
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(*mgo_v2.Iter)
	return ret0
}

// Iter indicates an expected call of Iter
func (mr *MockPipeManagerMockRecorder) Iter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockPipeManager)(nil).Iter))
}

// One mocks base method
func (m *MockPipeManager) One(result interface{}) error {
	ret := m.ctrl.Call(m, "One", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One
func (mr *MockPipeManagerMockRecorder) One(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockPipeManager)(nil).One), result)
}
