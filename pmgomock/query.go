// Code generated by MockGen. DO NOT EDIT.
// Source: /home/tim/git/pmgo/query.go

// Package pmgomock is a generated GoMock package.
package pmgomock

import (
	x "."
	gomock "github.com/golang/mock/gomock"
	. "github.com/percona/pmgo"
	mgo_v2 "gopkg.in/mgo.v2"
	reflect "reflect"
	time "time"
)

// MockQueryManager is a mock of QueryManager interface
type MockQueryManager struct {
	ctrl     *gomock.Controller
	recorder *MockQueryManagerMockRecorder
}

// MockQueryManagerMockRecorder is the mock recorder for MockQueryManager
type MockQueryManagerMockRecorder struct {
	mock *MockQueryManager
}

// NewMockQueryManager creates a new mock instance
func NewMockQueryManager(ctrl *gomock.Controller) *MockQueryManager {
	mock := &MockQueryManager{ctrl: ctrl}
	mock.recorder = &MockQueryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryManager) EXPECT() *MockQueryManagerMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockQueryManager) All(result interface{}) error {
	ret := m.ctrl.Call(m, "All", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockQueryManagerMockRecorder) All(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockQueryManager)(nil).All), result)
}

// Apply mocks base method
func (m *MockQueryManager) Apply(change mgo_v2.Change, result interface{}) (*mgo_v2.ChangeInfo, error) {
	ret := m.ctrl.Call(m, "Apply", change, result)
	ret0, _ := ret[0].(*mgo_v2.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply
func (mr *MockQueryManagerMockRecorder) Apply(change, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockQueryManager)(nil).Apply), change, result)
}

// Batch mocks base method
func (m *MockQueryManager) Batch(n int) x.QueryManager {
	ret := m.ctrl.Call(m, "Batch", n)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockQueryManagerMockRecorder) Batch(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockQueryManager)(nil).Batch), n)
}

// Comment mocks base method
func (m *MockQueryManager) Comment(comment string) x.QueryManager {
	ret := m.ctrl.Call(m, "Comment", comment)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Comment indicates an expected call of Comment
func (mr *MockQueryManagerMockRecorder) Comment(comment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockQueryManager)(nil).Comment), comment)
}

// Count mocks base method
func (m *MockQueryManager) Count() (int, error) {
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockQueryManagerMockRecorder) Count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQueryManager)(nil).Count))
}

// Distinct mocks base method
func (m *MockQueryManager) Distinct(key string, result interface{}) error {
	ret := m.ctrl.Call(m, "Distinct", key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distinct indicates an expected call of Distinct
func (mr *MockQueryManagerMockRecorder) Distinct(key, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockQueryManager)(nil).Distinct), key, result)
}

// Explain mocks base method
func (m *MockQueryManager) Explain(result interface{}) error {
	ret := m.ctrl.Call(m, "Explain", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Explain indicates an expected call of Explain
func (mr *MockQueryManagerMockRecorder) Explain(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockQueryManager)(nil).Explain), result)
}

// For mocks base method
func (m *MockQueryManager) For(result interface{}, f func() error) error {
	ret := m.ctrl.Call(m, "For", result, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// For indicates an expected call of For
func (mr *MockQueryManagerMockRecorder) For(result, f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockQueryManager)(nil).For), result, f)
}

// Hint mocks base method
func (m *MockQueryManager) Hint(indexKey ...string) x.QueryManager {
	varargs := []interface{}{}
	for _, a := range indexKey {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hint", varargs...)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Hint indicates an expected call of Hint
func (mr *MockQueryManagerMockRecorder) Hint(indexKey ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hint", reflect.TypeOf((*MockQueryManager)(nil).Hint), indexKey...)
}

// Iter mocks base method
func (m *MockQueryManager) Iter() *mgo_v2.Iter {
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(*mgo_v2.Iter)
	return ret0
}

// Iter indicates an expected call of Iter
func (mr *MockQueryManagerMockRecorder) Iter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQueryManager)(nil).Iter))
}

// Limit mocks base method
func (m *MockQueryManager) Limit(n int) x.QueryManager {
	ret := m.ctrl.Call(m, "Limit", n)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockQueryManagerMockRecorder) Limit(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQueryManager)(nil).Limit), n)
}

// LogReplay mocks base method
func (m *MockQueryManager) LogReplay() x.QueryManager {
	ret := m.ctrl.Call(m, "LogReplay")
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// LogReplay indicates an expected call of LogReplay
func (mr *MockQueryManagerMockRecorder) LogReplay() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogReplay", reflect.TypeOf((*MockQueryManager)(nil).LogReplay))
}

// MapReduce mocks base method
func (m *MockQueryManager) MapReduce(job *mgo_v2.MapReduce, result interface{}) (*mgo_v2.MapReduceInfo, error) {
	ret := m.ctrl.Call(m, "MapReduce", job, result)
	ret0, _ := ret[0].(*mgo_v2.MapReduceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapReduce indicates an expected call of MapReduce
func (mr *MockQueryManagerMockRecorder) MapReduce(job, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapReduce", reflect.TypeOf((*MockQueryManager)(nil).MapReduce), job, result)
}

// One mocks base method
func (m *MockQueryManager) One(result interface{}) error {
	ret := m.ctrl.Call(m, "One", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One
func (mr *MockQueryManagerMockRecorder) One(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockQueryManager)(nil).One), result)
}

// Prefetch mocks base method
func (m *MockQueryManager) Prefetch(p float64) x.QueryManager {
	ret := m.ctrl.Call(m, "Prefetch", p)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Prefetch indicates an expected call of Prefetch
func (mr *MockQueryManagerMockRecorder) Prefetch(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefetch", reflect.TypeOf((*MockQueryManager)(nil).Prefetch), p)
}

// Select mocks base method
func (m *MockQueryManager) Select(selector interface{}) x.QueryManager {
	ret := m.ctrl.Call(m, "Select", selector)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockQueryManagerMockRecorder) Select(selector interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQueryManager)(nil).Select), selector)
}

// SetMaxScan mocks base method
func (m *MockQueryManager) SetMaxScan(n int) x.QueryManager {
	ret := m.ctrl.Call(m, "SetMaxScan", n)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// SetMaxScan indicates an expected call of SetMaxScan
func (mr *MockQueryManagerMockRecorder) SetMaxScan(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxScan", reflect.TypeOf((*MockQueryManager)(nil).SetMaxScan), n)
}

// SetMaxTime mocks base method
func (m *MockQueryManager) SetMaxTime(d time.Duration) x.QueryManager {
	ret := m.ctrl.Call(m, "SetMaxTime", d)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// SetMaxTime indicates an expected call of SetMaxTime
func (mr *MockQueryManagerMockRecorder) SetMaxTime(d interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxTime", reflect.TypeOf((*MockQueryManager)(nil).SetMaxTime), d)
}

// Skip mocks base method
func (m *MockQueryManager) Skip(n int) x.QueryManager {
	ret := m.ctrl.Call(m, "Skip", n)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Skip indicates an expected call of Skip
func (mr *MockQueryManagerMockRecorder) Skip(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockQueryManager)(nil).Skip), n)
}

// Snapshot mocks base method
func (m *MockQueryManager) Snapshot() x.QueryManager {
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockQueryManagerMockRecorder) Snapshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockQueryManager)(nil).Snapshot))
}

// Sort mocks base method
func (m *MockQueryManager) Sort(fields ...string) x.QueryManager {
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sort", varargs...)
	ret0, _ := ret[0].(x.QueryManager)
	return ret0
}

// Sort indicates an expected call of Sort
func (mr *MockQueryManagerMockRecorder) Sort(fields ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockQueryManager)(nil).Sort), fields...)
}

// Tail mocks base method
func (m *MockQueryManager) Tail(timeout time.Duration) x.IterManager {
	ret := m.ctrl.Call(m, "Tail", timeout)
	ret0, _ := ret[0].(x.IterManager)
	return ret0
}

// Tail indicates an expected call of Tail
func (mr *MockQueryManagerMockRecorder) Tail(timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tail", reflect.TypeOf((*MockQueryManager)(nil).Tail), timeout)
}
